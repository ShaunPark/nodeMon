NAME: node-problem-detector
LAST DEPLOYED: Wed Jun 23 05:40:06 2021
NAMESPACE: monitoring
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: node-problem-detector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-problem-detector
  labels:
    app.kubernetes.io/name: node-problem-detector
    helm.sh/chart: node-problem-detector-2.0.2
    app.kubernetes.io/instance: node-problem-detector
    app.kubernetes.io/managed-by: Helm
---
# Source: node-problem-detector/templates/custom-config-configmap.yaml
apiVersion: v1
data:
  kernel-monitor.json: |
    {
        "plugin": "kmsg",
        "logPath": "/dev/kmsg",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "kernel-monitor",
        "conditions": [
            {
                "type": "KernelDeadlock",
                "reason": "KernelHasNoDeadlock",
                "message": "kernel has no deadlock"
            },
            {
                "type": "ReadonlyFilesystem",
                "reason": "FilesystemIsNotReadOnly",
                "message": "Filesystem is not read-only"
            },
            {
                "type": "EFSConnectFail",
                "reason": "EFSConnectSuccess",
                "message": "EFS is mounted successfully"
            }
        ],
        "rules": [
            {
                "type": "temporary",
                "reason": "OOMKilling",
                "pattern": "Kill process \\d+ (.+) score \\d+ or sacrifice child\\nKilled process \\d+ (.+) total-vm:\\d+kB, anon-rss:\\d+kB, file-rss:\\d+kB.*"
            },
            {
                "type": "temporary",
                "reason": "TaskHung",
                "pattern": "task \\S+:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "temporary",
                "reason": "UnregisterNetDevice",
                "pattern": "unregister_netdevice: waiting for \\w+ to become free. Usage count = \\d+"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "BUG: unable to handle kernel NULL pointer dereference at .*"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "divide error: 0000 \\[#\\d+\\] SMP"
            },
            {
                "type": "temporary",
                "reason": "MemoryReadError",
                "pattern": "CE memory read error .*"
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "AUFSUmountHung",
                "pattern": "task umount\\.aufs:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "DockerHung",
                "pattern": "task docker:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "ReadonlyFilesystem",
                "reason": "FilesystemIsReadOnly",
                "pattern": "Remounting filesystem read-only"
            },
            {
                "type": "permanent",
                "condition": "EFSConnectFail",
                "reason": "EFSConnectFail",
                "pattern": "nfs: server \\S+ not responding, timed out"
            }
        ]
    }
kind: ConfigMap
metadata:
  name: node-problem-detector-custom-config
  labels:
    app.kubernetes.io/name: node-problem-detector
    helm.sh/chart: node-problem-detector-2.0.2
    app.kubernetes.io/instance: node-problem-detector
    app.kubernetes.io/managed-by: Helm
---
# Source: node-problem-detector/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-problem-detector
  labels:
    app.kubernetes.io/name: node-problem-detector
    helm.sh/chart: node-problem-detector-2.0.2
    app.kubernetes.io/instance: node-problem-detector
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
# Source: node-problem-detector/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-problem-detector
  labels:
    app.kubernetes.io/name: node-problem-detector
    helm.sh/chart: node-problem-detector-2.0.2
    app.kubernetes.io/instance: node-problem-detector
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: node-problem-detector
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: node-problem-detector
  apiGroup: rbac.authorization.k8s.io
---
# Source: node-problem-detector/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-problem-detector
  labels:
    app.kubernetes.io/name: node-problem-detector
    helm.sh/chart: node-problem-detector-2.0.2
    app.kubernetes.io/instance: node-problem-detector
    app.kubernetes.io/managed-by: Helm
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-problem-detector
      app.kubernetes.io/instance: node-problem-detector
      app: node-problem-detector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-problem-detector
        app.kubernetes.io/instance: node-problem-detector
        app: node-problem-detector
      annotations:
        checksum/config: 05d545df265d1a19b6e84c466de0368cffcbe147ffc495114df818aac7193356
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: node-problem-detector
      hostNetwork: false
      hostPID: false
      terminationGracePeriodSeconds: 30
      containers:
        - name: node-problem-detector
          image:  "k8s.gcr.io/node-problem-detector/node-problem-detector:v0.8.8"
          imagePullPolicy: "IfNotPresent"
          command:
            - "/bin/sh"
            - "-c"
            - "exec /node-problem-detector --logtostderr --config.system-log-monitor=/custom-config/kernel-monitor.json  --prometheus-address=0.0.0.0 --prometheus-port=0 --k8s-exporter-heartbeat-period=5m0s"
          securityContext:
            privileged: true
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: log
              mountPath: /var/log/
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: custom-config
              mountPath: /custom-config
              readOnly: true
          ports:
            - containerPort: 0
              name: exporter
          resources:
            {}
      tolerations:
        - effect: NoSchedule
          operator: Exists
      nodeSelector:
        draino-enabled: "true"
      volumes:
        - name: log
          hostPath:
            path: /var/log/
        - name: localtime
          hostPath:
            path: /etc/localtime
            type: "FileOrCreate"
        - name: custom-config
          configMap:
            name: node-problem-detector-custom-config

NOTES:
To verify that the node-problem-detector pods have started, run:

  kubectl --namespace=monitoring get pods -l "app.kubernetes.io/name=node-problem-detector,app.kubernetes.io/instance=node-problem-detector"
